# coding:utf-8

import requests
import sys
import json
import time
from datetime import datetime

reload(sys)
sys.setdefaultencoding('utf-8')


def rob(rob_number, my_number, rob_type):
    rob_url = 'http://worose.com:11003/GrabFlows/grabflows/rob!doRob.action'
    rob_data = {'currentZl': '16199300', 'robSerialNumber': rob_number,
                'robType': rob_type, 'robZl': '100', 'serialNumber': my_number}

    rob_result = requests.post(rob_url, data=rob_data)
    return rob_result.json()


def rob_list(list_number):
    global all_list
    list_number = list_number
    list_url = 'http://worose.com:11003/GrabFlows/grabflows/user!getPieceLeague.action'
    list_data = {'currentPage': '1', 'pageSize': '10', 'serialNumber': list_number}

    get_list = requests.post(list_url, data=list_data)
    user_list = json.loads(get_list.json()["retData2"])
    for i in user_list:
        number = i["SERIAL_NUMBER"]
        print number
        if number not in all_list:
            all_list.append(number)

    last_user = json.loads(get_list.json()["retData2"])[-1]["SERIAL_NUMBER"]

    while len(all_list) < 500:
        rob_list(last_user)


def coins(number):
    url = 'http://worose.com:11003/GrabFlows/grabflows/user!getUserInfo.action?serialNumber='+str(number)
    result = requests.get(url)
    return json.loads(result.json()['retMsg'])['userInfo']['robbedPieceNum']


def duihuan(number):
    url = 'http://worose.com:11003/GrabFlows/grabflows/' \
          'user!doExchange.action?serialNumber=' + str(number) + \
          '&prizeId=T003&effectTime=1'
    result = requests.get(url)
    print result.text

# print rob(15516335151, 15514206068)
user_list = ["15617570979", "15514397360", "18639990706", "18538355968", "15617680508", "15638273515", "15518512661", "18638798060", "13253334791", "15517720537", "15617822705", "15660913995", "18695916090", "15649871792", "18625865400", "15690888796", "13137586502", "15537671558", "15670572620", "15565106281", "13101782625", "13253312231", "18567659829", "15537554258", "15638631059", "13007603391", "13183316303", "15670564000", "15538254030", "15617685437", "13298379605", "15515935597", "13015535635", "15670015214", "13027783293", "18539610556", "18695831047", "15518177236", "18637662103", "15690836092", "13243067557", "15518739737", "18567618236", "15637825505", "15639053078", "15565806918", "15565106353", "13015572912", "18637865387", "15617510895", "15518472991", "15637619542", "18695982336", "18637574912", "15537873083", "13253315894", "15565223635", "15565878731", "18537441394", "15639789368", "15538136834", "15690877963", "15517428007", "15638539080", "15537912300", "13213867684", "18538882271", "13283818995", "18625456829", "15516579058", "13213223426", "18637802926", "13253323304", "15638560874", "18567779038", "13137734617", "18567686240", "13275976535", "15516864346", "15639929401", "18537047282", "13140067360", "18638987169", "18625673717", "15638287338", "15638270497", "13101701793", "15638580104", "18637860187", "15514383227", "13140072752", "18537537175", "15518632281", "13213019138", "15538915478", "13298305191", "13271291827", "15516961901", "18624915885", "13073794621", "15539034992", "15537675985", "15516943725", "15617707640", "13071085469", "18637826862", "13087037915", "15638914812", "18503710011", "13137721249", "15660913190", "13007505625", "15639200014", "15638817035", "15638124353", "15638512984", "15517714677", "15690848972", "15565583825", "15638548212", "15538555563", "15638572912", "15517200765", "15516275521", "15516940612", "15670581323", "13276906120", "18637516693", "15638240706", "18637681810", "18638105983", "13033952883", "15537363876", "13271579363", "15515754470", "18638362890", "18637728197", "18603886939", "18530665698", "13037654411", "15638375227", "18637030870", "15517322217", "15516950018", "15690649100", "15617423680", "15639552037", "18539619174", "18637663833", "13213381612", "13223033363", "15639409250", "13027631683", "15515002550", "13137420300", "18637136556", "18567526204", "15517125873", "15670288212", "15638505806", "15617568668", "15639015998", "15518875131", "13101772887", "18638259060", "15565702031", "18503731007", "13140649822", "18623755510", "15639610511", "15514170667", "18638296833", "13027765536", "15617926163", "13283898676", "13007631999", "15517065908", "15670349458", "15565381219", "18638878379", "18530982081", "13137810106", "13069383039", "18603821801", "13140065372", "18637385732", "15538129958", "13290998212", "18537803378", "15617622240", "18603860439", "15638669501", "15539837103", "15617528140", "13193688860", "13193701257", "15516761615", "13137115143", "15538737025", "13213205009", "13137313821", "18538633996", "15503919329", "18538738925", "15617121858", "18625521132", "18503783690", "15538867770", "13101706061", "13148236978", "18537277775", "13203806013", "15649990095", "13069433353", "15649944442", "18637300597", "15638146866", "15503771297", "18639852012", "18603926297", "15538034281", "13223924005", "15639736509", "15617772898", "15538818678", "13033943818", "15660662827", "13027582037", "13137294925", "15503925711", "13148097727", "18530285358", "15537932909", "18537801397", "15664319756", "13073796020", "15603946186", "13193635134", "15537002609", "15603768832", "13183229861", "18503927083", "15517287099", "18625723378", "13213719629", "13233934696", "15517829198", "18603745930", "18613721995", "13103787695", "18539598526", "18530079398", "13203881638", "15518246999", "13073765131", "15639253802", "13027519928", "13298328502", "18638699584", "18539905652", "18530488329", "13193933837", "18695868955", "13033706119", "13213309580", "15515218291", "15517083763", "18538588818", "18537654411", "15517543557", "15538435563", "15688188073", "13233717956", "18539102291", "18530111498", "15565614333", "18603945529", "15690875303", "15617565349", "18637898712", "18595525935", "13069379678", "13069501582", "13193743939", "13123738373", "15672771523", "15518259002", "15503780099", "18638678992", "18625498886", "18530077169", "15639461818", "18638181115", "15637768322", "18530819685", "15639086970", "13233997701", "18639026393", "18603772125", "18637844417", "13271099953", "13233909409", "15660940059", "13148015378", "18603913581", "15517868462", "13271116406", "18637926380", "18530713327", "15617648217", "13183096463", "18537161278", "13203959855", "18697798103", "15517218988", "18637376231", "18695966606", "13283072295", "18639599119", "15516149101", "18539925214", "18637881272", "15565111287", "18537328590", "15538855090", "18638215871", "15514451397", "18639930991", "18639121570", "17603789605", "18638040615", "18637635510", "13183030203", "18624824063", "15637756669", "15639448120", "18695835100", "18539577496", "15637646589", "18538450000", "15638531524", "18637559525", "18638759759", "15537352330", "18639598785", "15518376095", "13298285159", "13290791188", "18638981860", "15538278779", "18537385810", "13137460080", "18603881372", "18639761023", "15565615155", "18613787531", "13140608418", "15649059015", "15515599835", "15537785400", "15538016181", "18639479693", "15565733412", "15637843654", "15639322711", "13137890135", "15517026775", "18537143311", "15637336827", "18638793377", "15503761608", "15517961019", "15503797813", "15688187710", "13183251812", "13103732622", "15538944899", "15517843649", "15660913212", "18639970924", "13033719261", "13007576716", "13271662507", "13183101044", "13137603581", "15639554724", "15670524879", "18639402264", "18637905028", "13193523806", "15539117963", "15670686933", "15637001120", "13233790580", "15560073584", "18639954994", "13213366321", "15638148996", "18638200761", "13140511300", "13262031605", "13193727432", "13148066688", "15690856287", "18603945214", "18539692815", "15670353080", "13271575353", "13137054977", "15637842535", "15670529095", "15670420950", "18623745058", "13213658623", "15617591721", "15518720069", "15565329712", "15649952080", "18637319538", "15537906652", "15517713313", "15518438927", "13071735960", "18539955883", "1566002808", "15639973695", "15617696563", "15565711357", "15538011462", "18637801819", "15538010432", "18538723140", "13073730580", "15617870482", "15539501751", "15518295163", "15639779387", "15617959982", "15638294100", "15518018174", "13253421551", "13283842872", "15515913351", "18638126179", "15517567163", "13137563889", "13183057902", "18639229285", "13071018907", "18625659585", "13137147518", "15670988546", "13140001395", "15617832153", "15638085205", "15638529932", "15517513563", "18625591294", "18538062871", "13290945660", "13072663076", "13069378291", "15660055161", "18568807305", "18568045060", "15518727380", "13083690284", "18637852794", "13283874189", "13298323797", "13103834635", "18637628901", "13253641851", "18638117380", "18638815455", "13203747579", "13275976031", "15670529724", "13037551291", "18638802673", "15670606410", "18539627827", "17603850963", "13253425515", "15617553646", "15538028161", "15516020157", "18625581134", "13283082575", "1553913555", "13087086152", "13193817621", "15514511981", "13033815756", "15517509693", "15670650827", "13290948108", "18568250712", "18625788871", "13137056357", "15638611223", "15617758147", "15515026913", "13298315121", "15518130234", "13253391960", "15670618471", "15514609372", "15660074416", "13071005156", "13253438786", "13283086872", "18539005411", "15617531108", "15516561796", "13298306172", "15639981673", "18503880638", "15539135557", "13140621151", "15638102523", "18638666179", "15516967785", "13253365115", "15503858682", "18695817685", "13253459399", "15639795074", "15537836251", "15516903969", "18625435950", "18595578788", "15518890317", "18695972307", "18639614050", "15517182617", "18538862460", "18538930502", "15637162895", "18568263760", "18539458939", "15617153826", "15518501290", "18603968220", "15514607136", "15638510473", "18638725058", "15538165075", "13183287111", "13007610252", "13213567803", "13027788817", "15538251520", "15515593656", "18568044025", "18613779925", "18539950181", "15516076628", "13298411081", "15617390815", "18503861879", "18639323238", "15638017117", "15515846991", "15537865421", "15565571375", "13071046230", "13295995737", "15537226710", "15515291026", "13203889970", "18539466558", "15537192689", "15515700672", "13193837121", "13213302365", "15565934891", "15517120506", "18603735221", "15560051323", "15617629980", "13183215115", "15639270657", "13253516470", "15560035772", "15517169707", "13014660309", "13298196260", "13137921191", "15537146881", "13137617115", "15538709781", "15538002257", "18639635085", "13255922823", "18638999203", "13213876533", "13071091328", "13283710216", "15617516051", "15503955225", "15670383613", "15544015597", "15670515501", "18537168781", "13083607353", "18625591412", "15514466612", "15670287053", "18539902063", "15649620080", "13233885581", "15518835894", "18637150979", "18638927306", "15514206068", "15639263432", "15516335151"]


def work(number_list, my_number):
    n = 100
    now = datetime.now()
    rob_type = 20
    output = "\n=========================\n========================="
    rob_time = requests.post("http://worose.com:11003/GrabFlows/grabflows/rob!getLastRobTime.action",
                             data={"serialNumber": my_number}).json()

    rob_types = {"stranger": 1, "boss": 2, "friends": 3, "enemy": 4}
    have_tried = False
    for i in rob_types:
        type_name = "rob_%s_time" % i

        # s = (now - datetime.strptime(rob_time[type_name], '%Y-%m-%d %H:%M:%S')).seconds
        s = 100000
        if s > 21600:
            have_tried = True
            while True:
                rob_number = number_list[n]
                output += "Rob_Type：%s \n" % rob_type
                if rob_type >= 1000:
                    s = open("rob.log", "a")
                    s.write(output)
                    s.write(time.strftime("%Y-%m-%d %H:%M:%S", time.localtime()))
                    s.write("\n当前金币 %s 个\n" % coins(my_number))
                    s.close()
                    break
                try:
                    rob_result = rob(rob_number, my_number, rob_type)
                    output += "%s \n" % rob_result["retMsg"]
                    print output
                except:
                    rob_type == 10
                    continue
                result = str(rob_result["retCode"])
                if result == '-7':
                    n += 1
                    continue
                elif result == '-5':
                    rob_type += 1
                    continue
                elif result == '0':
                    n += 1
                    continue
                else:

                    break
            break
        else:
            if not have_tried:
                s = open("rob.log", "a")
                output += "冷却中\n"
                s.write(output)
                s.write(time.strftime("%Y-%m-%d %H:%M:%S", time.localtime()))
                s.write("\n当前金币 %s 个\n" % coins(my_number))
                s.close()


